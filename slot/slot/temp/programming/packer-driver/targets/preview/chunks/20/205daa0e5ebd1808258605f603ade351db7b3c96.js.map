{"version":3,"sources":["file:///C:/Cocos/slot/assets/scripts/services/GameService.ts"],"names":["GameService","Vec3","resources","instantiate","Prefab","tween","SlotPicturesEnum","pictureHeight","getPicturePath","pictureNumber","checkResult","layer1","layer2","layer3","layer1Result","findLast","item","layer2Result","layer3Result","name","removeChilds","layout","pictureArray","lastNode","node","removeChild","splice","length","resetLayout","setPosition","rollPicture","picutreArray","promises","num","Math","floor","random","promise","Promise","resolve","reject","load","err","prefab","newNode","push","i","nodes","all","shuffledNodes","sort","forEach","index","insertChild","tweenPictures","to","position","easing","call","start","initGame","layout1","layout2","layout3","layer1Pics","layer2Pics","layer3Pics","newNode1","newNode2","newNode3","addChild"],"mappings":"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","sourcesContent":["import { _decorator, Node, Layout, Vec3, resources, instantiate, Prefab, tween } from 'cc';\r\nimport SlotPicturesEnum from \"../../utils/SlotPicturesEnum\";\r\n\r\nexport class GameService {\r\n\r\n    private pictureHeight = 450\r\n\r\n    getPicturePath(pictureNumber:number){\r\n        return SlotPicturesEnum[pictureNumber]\r\n    }\r\n\r\n    checkResult(layer1:Node[], layer2:Node[], layer3:Node[]):boolean{\r\n\r\n        let layer1Result = layer1.findLast((item:Node)=>{\r\n            return item\r\n        })\r\n\r\n        let layer2Result = layer2.findLast((item:Node)=>{\r\n            return item\r\n        })\r\n\r\n        let layer3Result = layer3.findLast((item:Node)=>{\r\n            return item\r\n        })\r\n\r\n        if((layer1Result.name === layer2Result.name) && (layer1Result.name === layer3Result.name)){\r\n            return true\r\n        }else{\r\n            return false\r\n        }\r\n    }\r\n\r\n    removeChilds(layout:Layout, pictureArray:Node[]){\r\n        let lastNode = pictureArray.findLast((item)=>{\r\n            return item\r\n        })\r\n\r\n        for(let node of pictureArray){\r\n            if(node !== lastNode){\r\n                layout.node.removeChild(node)\r\n            }\r\n        }\r\n        pictureArray.splice(0, pictureArray.length-1)\r\n    }\r\n\r\n    resetLayout(layout:Layout){\r\n        layout.node.setPosition(new Vec3(0, 0, 0))\r\n    }\r\n\r\n    async rollPicture(layout:Layout, picutreArray:Node[]){\r\n        const promises = [];\r\n\r\n        for (let i = 0; i < 20; i++) {\r\n            const num = Math.floor(Math.random() * 2 + 1);\r\n\r\n            const promise = new Promise((resolve, reject) => {\r\n                resources.load(`prefabs/${this.getPicturePath(num)}`, Prefab, (err, prefab) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        const newNode = instantiate(prefab);\r\n                        resolve(newNode);\r\n                    }\r\n                });\r\n            });\r\n\r\n            promises.push(promise);\r\n        }\r\n\r\n        const nodes = await Promise.all(promises);\r\n\r\n        const shuffledNodes = nodes.sort(() => Math.random() - 0.5);\r\n\r\n        shuffledNodes.forEach((node, index) => {\r\n            picutreArray.push(node);\r\n            layout.node.insertChild(node, index + 1);\r\n        })\r\n    }\r\n\r\n    tweenPictures(layout:Layout){\r\n\r\n        return new Promise((resolve)=>{\r\n\r\n            tween(layout.node)\r\n                .to(4, {\r\n                    position: new Vec3(0, this.pictureHeight * 20, 0),\r\n                }, {\r\n                    easing: 'sineInOut',\r\n                }).call(()=>{\r\n                    resolve(true)\r\n                })\r\n                .start()\r\n        })\r\n    }\r\n\r\n    initGame(layout1:Layout, layout2:Layout, layout3:Layout, layer1Pics:Node[], layer2Pics:Node[], layer3Pics:Node[]){\r\n        \r\n        resources.load(`prefabs/${this.getPicturePath(1)}`, Prefab, (err, prefab)=>{\r\n            const newNode1 = instantiate(prefab)\r\n            const newNode2 = instantiate(prefab)\r\n            const newNode3 = instantiate(prefab)\r\n\r\n            layer1Pics.push(newNode1)\r\n            layer2Pics.push(newNode2)\r\n            layer3Pics.push(newNode3)\r\n\r\n            layout1.node.addChild(newNode1)\r\n            layout2.node.addChild(newNode2)\r\n            layout3.node.addChild(newNode3)\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n"]}